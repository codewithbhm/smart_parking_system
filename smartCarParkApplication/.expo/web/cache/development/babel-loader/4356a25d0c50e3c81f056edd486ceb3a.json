{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeArrayBookDataAvailable = writeArrayBookDataAvailable;\nexports.writeArrayBookDataEmpty = writeArrayBookDataEmpty;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nfunction writeArrayBookDataAvailable(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, docNumberToChange, querySnapshot) {\n  var activeDoc = {\n    \"parkSlot\": \"\",\n    \"parkName\": \"\",\n    \"parkId\": \"\",\n    \"checkInDate\": myCheckOutDate,\n    \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n    \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n    \"userId\": currentUserUid\n  };\n  var bookData = {\n    \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n    \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n    \"userId\": currentUserUid\n  };\n  userDocument.doc(querySnapshot.docs[docNumberToChange].id).get().then(function (snap) {\n    var okeyTime = snap.data();\n    var times = okeyTime[myCheckOutDate];\n    console.log(okeyTime);\n    var myNewTime = (0, _toConsumableArray2.default)(times);\n    myNewTime.push(bookData);\n    var mylastObject = (0, _defineProperty2.default)({}, myCheckOutDate, myNewTime);\n    userDocument.doc(snap.id).set(mylastObject, {\n      merge: true\n    }).then(function () {\n      console.log(\"Document successfully written!\");\n    });\n    (0, _firestore.default)().collection('users').doc(\"\" + currentUserUid).collection('activeBookedPark').add(activeDoc);\n  });\n}\n\nfunction writeArrayBookDataEmpty(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot) {\n  var bookDataIfNotSameTime = (0, _defineProperty2.default)({}, myCheckOutDate, [{\n    \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n    \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n    \"userId\": currentUserUid\n  }]);\n  userDocument.doc(querySnapshot.docs[i].id).set(bookDataIfNotSameTime, {\n    merge: true\n  }).then(function () {\n    console.log(\"Document successfully written!\");\n  });\n}","map":{"version":3,"sources":["/Users/kuzeykose/Desktop/Smart Parking Systems/Application/smartCarParkApplication/src/provider/FirebaseProviderHelpers/writeArrayBookData.js"],"names":["writeArrayBookDataAvailable","userDocument","myCheckOutDate","checkInTime","checkOutTime","currentUserUid","docNumberToChange","querySnapshot","activeDoc","toLocaleTimeString","bookData","doc","docs","id","get","then","snap","okeyTime","data","times","console","log","myNewTime","push","mylastObject","set","merge","collection","add","writeArrayBookDataEmpty","i","bookDataIfNotSameTime"],"mappings":";;;;;;;;;;;;AAAA;;AAEA,SAASA,2BAAT,CAAqCC,YAArC,EAAmDC,cAAnD,EAAmEC,WAAnE,EAAgFC,YAAhF,EAA8FC,cAA9F,EAA8GC,iBAA9G,EAAiIC,aAAjI,EAAgJ;AAC9I,MAAIC,SAAS,GAAG;AACd,gBAAY,EADE;AAEd,gBAAY,EAFE;AAGd,cAAU,EAHI;AAId,mBAAeN,cAJD;AAKd,mBAAeC,WAAW,CAACM,kBAAZ,CAA+B,IAA/B,CALD;AAMd,oBAAgBL,YAAY,CAACK,kBAAb,CAAgC,IAAhC,CANF;AAOd,cAAUJ;AAPI,GAAhB;AAUA,MAAIK,QAAQ,GAAG;AACb,mBAAeP,WAAW,CAACM,kBAAZ,CAA+B,IAA/B,CADF;AAEb,oBAAgBL,YAAY,CAACK,kBAAb,CAAgC,IAAhC,CAFH;AAGb,cAAUJ;AAHG,GAAf;AAOAJ,EAAAA,YAAY,CAACU,GAAb,CAAiBJ,aAAa,CAACK,IAAd,CAAmBN,iBAAnB,EAAsCO,EAAvD,EAA2DC,GAA3D,GAAiEC,IAAjE,CAAsE,UAAAC,IAAI,EAAI;AAC5E,QAAIC,QAAQ,GAAGD,IAAI,CAACE,IAAL,EAAf;AACA,QAAIC,KAAK,GAAGF,QAAQ,CAACf,cAAD,CAApB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,QAAIK,SAAS,oCAAOH,KAAP,CAAb;AACAG,IAAAA,SAAS,CAACC,IAAV,CAAeb,QAAf;AAGA,QAAIc,YAAY,qCACbtB,cADa,EACIoB,SADJ,CAAhB;AAIArB,IAAAA,YAAY,CAACU,GAAb,CAAiBK,IAAI,CAACH,EAAtB,EACGY,GADH,CACOD,YADP,EACqB;AAAEE,MAAAA,KAAK,EAAE;AAAT,KADrB,EACsCX,IADtC,CAC2C,YAAM;AAAEK,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AAA+C,KADlG;AAIA,8BAAYM,UAAZ,CAAuB,OAAvB,EAAgChB,GAAhC,MAAuCN,cAAvC,EAAyDsB,UAAzD,CAAoE,kBAApE,EAAwFC,GAAxF,CAA4FpB,SAA5F;AACD,GAjBD;AAkBD;;AAGD,SAASqB,uBAAT,CAAiC5B,YAAjC,EAA+CC,cAA/C,EAA+DC,WAA/D,EAA4EC,YAA5E,EAA0FC,cAA1F,EAA0GyB,CAA1G,EAA6GvB,aAA7G,EAA4H;AAC1H,MAAIwB,qBAAqB,qCACtB7B,cADsB,EACL,CAChB;AACE,mBAAeC,WAAW,CAACM,kBAAZ,CAA+B,IAA/B,CADjB;AAEE,oBAAgBL,YAAY,CAACK,kBAAb,CAAgC,IAAhC,CAFlB;AAGE,cAAUJ;AAHZ,GADgB,CADK,CAAzB;AAUAJ,EAAAA,YAAY,CAACU,GAAb,CAAiBJ,aAAa,CAACK,IAAd,CAAmBkB,CAAnB,EAAsBjB,EAAvC,EACGY,GADH,CACOM,qBADP,EAC8B;AAAEL,IAAAA,KAAK,EAAE;AAAT,GAD9B,EAC+CX,IAD/C,CACoD,YAAM;AAAEK,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AAA+C,GAD3G;AAGD","sourcesContent":["import firestore from '@react-native-firebase/firestore';\n\nfunction writeArrayBookDataAvailable(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, docNumberToChange, querySnapshot) {\n  let activeDoc = { // for user active data\n    \"parkSlot\": \"\",\n    \"parkName\": \"\",\n    \"parkId\": \"\",\n    \"checkInDate\": myCheckOutDate,\n    \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n    \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n    \"userId\": currentUserUid\n  }\n\n  let bookData = { // available or notAvailable uses\n    \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n    \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n    \"userId\": currentUserUid\n  }\n\n  //parking slot doc\n  userDocument.doc(querySnapshot.docs[docNumberToChange].id).get().then(snap => {\n    var okeyTime = snap.data() //get document\n    var times = okeyTime[myCheckOutDate] // get array which name is selected date \n    console.log(okeyTime);\n    var myNewTime = [...times] // copy array\n    myNewTime.push(bookData) // push inside, checkIn checkOut\n\n\n    let mylastObject = { //write in object\n      [myCheckOutDate]: myNewTime\n    }\n\n    userDocument.doc(snap.id) // write firebase\n      .set(mylastObject, { merge: true }).then(() => { console.log(\"Document successfully written!\") });\n\n    //user doc\n    firestore().collection('users').doc(`${currentUserUid}`).collection('activeBookedPark').add(activeDoc)\n  })\n}\n\n\nfunction writeArrayBookDataEmpty(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot) {\n  let bookDataIfNotSameTime = { // empty uses because creating date at the same time\n    [myCheckOutDate]: [\n      {\n        \"checkInTime\": checkInTime.toLocaleTimeString('tr'),\n        \"checkOutTime\": checkOutTime.toLocaleTimeString('tr'),\n        \"userId\": currentUserUid\n      }\n    ]\n  }\n\n  userDocument.doc(querySnapshot.docs[i].id)\n    .set(bookDataIfNotSameTime, { merge: true }).then(() => { console.log(\"Document successfully written!\") });\n\n}\n\n\nexport { writeArrayBookDataAvailable, writeArrayBookDataEmpty }\n"]},"metadata":{},"sourceType":"script"}