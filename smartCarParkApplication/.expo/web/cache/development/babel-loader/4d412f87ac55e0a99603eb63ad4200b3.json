{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseContext = exports.FirebaseProvider = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _auth = _interopRequireDefault(require(\"@react-native-firebase/auth\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _checkAvailableStatus = require(\"./FirebaseProviderHelpers/checkAvailableStatus\");\n\nvar _writeArrayBookData = require(\"./FirebaseProviderHelpers/writeArrayBookData\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/kuzeykose/Desktop/Smart Parking Systems/Application/smartCarParkApplication/src/provider/FirebaseProvider.js\";\n\nvar FirebaseContext = (0, _react.createContext)(null);\nexports.FirebaseContext = FirebaseContext;\n\nvar FirebaseProvider = function FirebaseProvider(props) {\n  var _useState = (0, _react.useState)(new Date(2020, 1, 1, 0, 0, 0)),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      checkInTime = _useState2[0],\n      setCheckInTime = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(new Date(2020, 1, 1, 0, 0, 0)),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      checkOutTime = _useState4[0],\n      setCheckOutTime = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(new Date()),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      checkInDate = _useState6[0],\n      setCheckInDate = _useState6[1];\n\n  var _useState7 = (0, _react.useState)({}),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      userInformation = _useState8[0],\n      setUserInformation = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(null),\n      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n      slotAvaliblityInformation = _useState10[0],\n      setSlotAvaliblityInformation = _useState10[1];\n\n  var currentUserUid = (0, _auth.default)().currentUser.uid;\n\n  var onChangeCheckInTime = function onChangeCheckInTime(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setCheckInTime(currentDate);\n  };\n\n  var onChangeCheckOutTime = function onChangeCheckOutTime(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setCheckOutTime(currentDate);\n  };\n\n  var onChangeCheckInDate = function onChangeCheckInDate(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setCheckInDate(currentDate);\n  };\n\n  var allNotAvailable = function allNotAvailable(arr) {\n    return arr.every(function (v) {\n      return v === \"notAvailable\";\n    });\n  };\n\n  (0, _react.useEffect)(function () {\n    (0, _firestore.default)().collection('users').doc(\"\" + currentUserUid).get().then(function (snapShot) {\n      setUserInformation(snapShot.data());\n    });\n  });\n  (0, _react.useEffect)(function () {\n    _axios.default.post('http://localhost:3000/', {\n      currentUserUid: currentUserUid\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, [currentUserUid]);\n\n  var writeFirebaseUserBook = function writeFirebaseUserBook(parkId) {\n    var userDocument = (0, _firestore.default)().collection('car-parks').doc(parkId).collection('parking-slots');\n    var date = checkInDate.toLocaleDateString().split(\"/\");\n    var myCheckOutDate = date.join(\"-\");\n    userDocument.get().then(function (querySnapshot) {\n      var slotAvaliblity = querySnapshot.docs.map(function (doc) {\n        return (0, _checkAvailableStatus.checkAvailableStatus)(doc, checkInTime, checkOutTime, checkInDate);\n      });\n      console.log(slotAvaliblity);\n\n      for (var i = 0; i < slotAvaliblity.length; i++) {\n        if (slotAvaliblity[i] === undefined) {\n          (0, _writeArrayBookData.writeArrayBookDataAvailable)(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot);\n          break;\n        } else if (slotAvaliblity[i] === 'empty') {\n          (0, _writeArrayBookData.writeArrayBookDataEmpty)(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot);\n          break;\n        }\n      }\n\n      if (allNotAvailable(slotAvaliblity)) {\n        console.log(\"sorry no available\");\n      }\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n  };\n\n  var logOut = function logOut() {\n    (0, _auth.default)().signOut().then(function () {\n      return console.log('User signed out!');\n    });\n  };\n\n  return _react.default.createElement(FirebaseContext.Provider, {\n    value: {\n      writeFirebaseUserBook: writeFirebaseUserBook,\n      onChangeCheckInTime: onChangeCheckInTime,\n      onChangeCheckOutTime: onChangeCheckOutTime,\n      onChangeCheckInDate: onChangeCheckInDate,\n      checkInTime: checkInTime,\n      checkOutTime: checkOutTime,\n      checkInDate: checkInDate,\n      userInformation: userInformation,\n      logOut: logOut,\n      setSlotAvaliblityInformation: setSlotAvaliblityInformation,\n      slotAvaliblityInformation: slotAvaliblityInformation\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexports.FirebaseProvider = FirebaseProvider;","map":{"version":3,"sources":["/Users/kuzeykose/Desktop/Smart Parking Systems/Application/smartCarParkApplication/src/provider/FirebaseProvider.js"],"names":["FirebaseContext","FirebaseProvider","props","Date","checkInTime","setCheckInTime","checkOutTime","setCheckOutTime","checkInDate","setCheckInDate","userInformation","setUserInformation","slotAvaliblityInformation","setSlotAvaliblityInformation","currentUserUid","currentUser","uid","onChangeCheckInTime","event","selectedDate","currentDate","date","onChangeCheckOutTime","onChangeCheckInDate","allNotAvailable","arr","every","v","collection","doc","get","then","snapShot","data","axios","post","res","console","log","catch","error","writeFirebaseUserBook","parkId","userDocument","toLocaleDateString","split","myCheckOutDate","join","querySnapshot","slotAvaliblity","docs","map","i","length","undefined","logOut","signOut","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport Auth from '@react-native-firebase/auth';\nimport firestore from '@react-native-firebase/firestore';\nimport axios from 'axios'\n\nimport { checkAvailableStatus } from './FirebaseProviderHelpers/checkAvailableStatus'\nimport { writeArrayBookDataAvailable, writeArrayBookDataEmpty } from './FirebaseProviderHelpers/writeArrayBookData'\n\nconst FirebaseContext = createContext(null)\n\nconst FirebaseProvider = (props) => {\n  //get parkId for send Firestore specific position\n  const [checkInTime, setCheckInTime] = useState(new Date(2020, 1, 1, 0, 0, 0))\n  const [checkOutTime, setCheckOutTime] = useState(new Date(2020, 1, 1, 0, 0, 0))\n  const [checkInDate, setCheckInDate] = useState(new Date())\n  const [userInformation, setUserInformation] = useState({})\n  const [slotAvaliblityInformation, setSlotAvaliblityInformation] = useState(null)\n\n\n  const currentUserUid = Auth().currentUser.uid\n  // user select check Date Time\n  const onChangeCheckInTime = (event, selectedDate) => {\n    const currentDate = selectedDate || date\n    setCheckInTime(currentDate);\n  }\n\n  const onChangeCheckOutTime = (event, selectedDate) => {\n    const currentDate = selectedDate || date\n    setCheckOutTime(currentDate);\n  }\n\n  const onChangeCheckInDate = (event, selectedDate) => {\n    const currentDate = selectedDate || date\n    setCheckInDate(currentDate);\n  }\n\n  const allNotAvailable = arr => arr.every(v => v === \"notAvailable\") // check all element in slotAvaliblity are they notAvailable?\n\n  useEffect(() => {\n    firestore().collection('users').doc(`${currentUserUid}`)\n      .get()\n      .then(snapShot => {\n        setUserInformation(snapShot.data())\n      })\n  })\n\n\n  useEffect(() => {\n    axios.post('http://localhost:3000/', {\n      currentUserUid\n    }).then(res => {\n      console.log(res);\n    }).catch(function (error) {\n      console.log(error);\n    })\n  }, [currentUserUid])\n\n\n  // set Firebase car - parks slots from taking data from user -> (car - parks / { parkId } / parking - slot)\n  const writeFirebaseUserBook = (parkId) => {\n    const userDocument = firestore().collection('car-parks').doc(parkId).collection('parking-slots')\n    var date = checkInDate.toLocaleDateString().split(\"/\")\n    var myCheckOutDate = date.join(\"-\")\n    //get document in firebase and set slotAvaliblity with empty/available/notAvailable\n    userDocument.get().then(querySnapshot => {\n      var slotAvaliblity = querySnapshot.docs.map(doc => {\n        return checkAvailableStatus(doc, checkInTime, checkOutTime, checkInDate)\n      })\n      console.log(slotAvaliblity);\n\n      for (let i = 0; i < slotAvaliblity.length; i++) {\n        if (slotAvaliblity[i] === undefined) {\n          writeArrayBookDataAvailable(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot) //write firebase\n          break\n        } else if (slotAvaliblity[i] === 'empty') {\n          writeArrayBookDataEmpty(userDocument, myCheckOutDate, checkInTime, checkOutTime, currentUserUid, i, querySnapshot)\n          break\n        }\n      }\n\n      if (allNotAvailable(slotAvaliblity)) {\n        console.log(\"sorry no available\");\n      }\n\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    })\n\n  }\n\n  const logOut = () => {\n    Auth()\n      .signOut()\n      .then(() => console.log('User signed out!'));\n  }\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        writeFirebaseUserBook: writeFirebaseUserBook,\n        onChangeCheckInTime: onChangeCheckInTime,\n        onChangeCheckOutTime: onChangeCheckOutTime,\n        onChangeCheckInDate: onChangeCheckInDate,\n        checkInTime: checkInTime,\n        checkOutTime: checkOutTime,\n        checkInDate: checkInDate,\n        userInformation: userInformation,\n        logOut: logOut,\n        setSlotAvaliblityInformation: setSlotAvaliblityInformation,\n        slotAvaliblityInformation: slotAvaliblityInformation\n      }}>\n      { props.children}\n    </FirebaseContext.Provider >\n  )\n};\n\nexport { FirebaseProvider, FirebaseContext }\n"]},"metadata":{},"sourceType":"script"}