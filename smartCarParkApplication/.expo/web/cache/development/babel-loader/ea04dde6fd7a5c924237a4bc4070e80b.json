{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _FirebaseProvider = require(\"../../provider/FirebaseProvider\");\n\nvar _Ticket = _interopRequireDefault(require(\"../../components/Ticket\"));\n\nvar _firestore = _interopRequireWildcard(require(\"@react-native-firebase/firestore\"));\n\nvar _auth = _interopRequireDefault(require(\"@react-native-firebase/auth\"));\n\nvar _style = require(\"./style\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _materialTopTabs = require(\"@react-navigation/material-top-tabs\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/kuzeykose/Desktop/Smart Parking Systems/Application/smartCarParkApplication/src/scenes/ActiveTicket/index.js\";\n\nvar Tab = (0, _materialTopTabs.createMaterialTopTabNavigator)();\n\nvar Tickets = function Tickets() {\n  var value = (0, _react.useContext)(_FirebaseProvider.FirebaseContext);\n  var currentUserUid = (0, _auth.default)().currentUser.uid;\n\n  var _useState = (0, _react.useState)([]),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      activeBooked = _useState2[0],\n      setActiveBooked = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    (0, _firestore.default)().collection('users').doc(\"\" + currentUserUid).collection('activeBookedPark').get().then(function (snapShot) {\n      var myArray = [];\n      snapShot.forEach(function (doc) {\n        myArray.push(doc.data());\n      });\n      setActiveBooked(myArray);\n    });\n  }, [activeBooked]);\n  var allTickets = activeBooked.map(function (inf, index) {\n    return _react.default.createElement(_style.Container, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_Ticket.default, {\n      parkName: inf.parkName,\n      date: inf.checkInDate,\n      time: inf.checkInTime + \" - \" + inf.checkOutTime,\n      parkSlotName: inf.parkSlot,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }));\n  });\n  return _react.default.createElement(_reactNative.ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, allTickets);\n};\n\nvar _default = Tickets;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kuzeykose/Desktop/Smart Parking Systems/Application/smartCarParkApplication/src/scenes/ActiveTicket/index.js"],"names":["Tab","Tickets","value","FirebaseContext","currentUserUid","currentUser","uid","activeBooked","setActiveBooked","collection","doc","get","then","snapShot","myArray","forEach","push","data","allTickets","map","inf","index","parkName","checkInDate","checkInTime","checkOutTime","parkSlot"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;;;;AAEA,IAAMA,GAAG,GAAG,qDAAZ;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAEpB,MAAMC,KAAK,GAAG,uBAAWC,iCAAX,CAAd;AACA,MAAMC,cAAc,GAAG,qBAAOC,WAAP,CAAmBC,GAA1C;;AAHoB,kBAIoB,qBAAS,EAAT,CAJpB;AAAA;AAAA,MAIbC,YAJa;AAAA,MAICC,eAJD;;AAMpB,wBAAU,YAAM;AACd,8BAAYC,UAAZ,CAAuB,OAAvB,EAAgCC,GAAhC,MAAuCN,cAAvC,EAAyDK,UAAzD,CAAoE,kBAApE,EACGE,GADH,GAEGC,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB,UAAIC,OAAO,GAAG,EAAd;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAAL,GAAG,EAAI;AACtBI,QAAAA,OAAO,CAACE,IAAR,CAAaN,GAAG,CAACO,IAAJ,EAAb;AACD,OAFD;AAGAT,MAAAA,eAAe,CAACM,OAAD,CAAf;AACD,KARH;AASD,GAVD,EAUG,CAACP,YAAD,CAVH;AAuBA,MAAMW,UAAU,GAAGX,YAAY,CAACY,GAAb,CAAiB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClD,WACE,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6BAAC,eAAD;AACE,MAAA,QAAQ,EAAED,GAAG,CAACE,QADhB;AAEE,MAAA,IAAI,EAAEF,GAAG,CAACG,WAFZ;AAGE,MAAA,IAAI,EAAEH,GAAG,CAACI,WAAJ,GAAkB,KAAlB,GAA0BJ,GAAG,CAACK,YAHtC;AAIE,MAAA,YAAY,EAAEL,GAAG,CAACM,QAJpB;AAKE,MAAA,GAAG,EAAEL,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD,GAZkB,CAAnB;AAeA,SACE,6BAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,UADH,CADF;AAKD,CAjDD;;eAmDejB,O","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { FirebaseContext } from '../../provider/FirebaseProvider'\nimport Ticket from '../../components/Ticket'\nimport firestore, { firebase } from '@react-native-firebase/firestore';\nimport Auth from '@react-native-firebase/auth';\nimport { Container, CustomButton } from './style'\nimport { SafeAreaView, ScrollView, Button } from 'react-native';\n\n\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { PrivateValueStore } from '@react-navigation/native';\n\nconst Tab = createMaterialTopTabNavigator();\nconst Tickets = () => {\n\n  const value = useContext(FirebaseContext);\n  const currentUserUid = Auth().currentUser.uid\n  const [activeBooked, setActiveBooked] = useState([])\n\n  useEffect(() => {\n    firestore().collection('users').doc(`${currentUserUid}`).collection('activeBookedPark')\n      .get()\n      .then(snapShot => {\n        let myArray = []\n        snapShot.forEach(doc => {\n          myArray.push(doc.data())\n        })\n        setActiveBooked(myArray)\n      })\n  }, [activeBooked])\n  //   firestore().collection('users').doc(`${currentUserUid}`).collection('activeBookedPark')\n  //     .get()\n  //     .then(snapShot => {\n  //       let myArray = []\n  //       snapShot.forEach(doc => {\n  //         myArray.push(doc.data())\n  //       })\n  //       setActiveBooked(myArray)\n  //     })\n  // }, [activeBooked])\n\n\n  const allTickets = activeBooked.map((inf, index) => {\n    return (\n      <Container>\n        <Ticket\n          parkName={inf.parkName}\n          date={inf.checkInDate}\n          time={inf.checkInTime + \" - \" + inf.checkOutTime}\n          parkSlotName={inf.parkSlot}\n          key={index}\n        />\n      </Container>\n    )\n  }\n  );\n\n  return (\n    <ScrollView>\n      {allTickets}\n    </ScrollView>\n  );\n};\n\nexport default Tickets;\n\n// <Button\n// onPress={() => {\n//   value.setCancel([inf.checkInDate, inf.checkInTime, inf.checkOutTime])\n// }}\n// title=\"Cancel\" color='red' />"]},"metadata":{},"sourceType":"script"}